Traceback (most recent call last):
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "C:\laragon\bin\python\python-3.10\lib\asyncio\base_events.py", line 646, in run_until_complete
    return future.result()
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests
import pandas as pd

# Silahkan buat API key dari https://dev.springernature.com/#api
API_KEY = "d16e27ffd519f216eff78d914d5aae4c"

# Variasi kata kunci
keywords = ["web mining", "web usage mining", "data mining"]

# Endpoint API Springer
url = "https://api.springernature.com/meta/v2/json"

all_records = []

for kw in keywords:
    params = {
        "q": kw,        # query keyword
        "api_key": API_KEY,
        "p": 20         # jumlah hasil per request (max 50)
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        data = response.json()
        print(f"Keyword: {kw}")
        print(f"Total hasil: {data['result'][0]['total']}\n")

        for record in data.get('records', []):
            all_records.append({
                "keyword": kw,
                "doi": record.get('doi', 'N/A'),
                "title": record.get('title', 'No title'),
                "publicationName": record.get('publicationName', 'N/A'),
                "url": record.get('url', [{'value': 'N/A'}])[0]['value']
            })
    else:
        print("Error:", response.status_code, response.text)

# Simpan ke CSV
df = pd.DataFrame(all_records)
df.to_csv("springer_crawling.csv", index=False, encoding="utf-8")
print("Hasil crawling sudah disimpan ke springer_crawling.csv")

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[2], line 2[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mrequests[39;00m
[1;32m----> 2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[0;32m      4[0m [38;5;66;03m# Silahkan buat API key dari https://dev.springernature.com/#api[39;00m
[0;32m      5[0m API_KEY [38;5;241m=[39m [38;5;124m"[39m[38;5;124md16e27ffd519f216eff78d914d5aae4c[39m[38;5;124m"[39m

[1;31mModuleNotFoundError[0m: No module named 'pandas'

